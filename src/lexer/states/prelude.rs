use std::any;
use std::fmt;
use crate::lexer::error::LexErrorKind;
use crate::lexer::tokens::TokenKind;

pub type ReceiveResult = Result<Transition, TransitionError>;

/*
[Transition]Actions and TransitionErrors are used to abstract over
interactions with the context such that `State::receive` needs to
have no access to the Context or directly manipulate it; instead,
actions and error directives tell the caller how to update the context
or generate proper errors based on context's tracked positions
 */

#[derive(Debug, PartialEq)]
pub enum Action {
    AddToken(TokenKind),
    ContinueToken,
    NoAction,
    // TODO: Less explicitly about positioning? It would be nice if the state transitions
    // emit actions that are less implementation/context-specific, and then the context itself
    // determines what to do.
    //
    // And maybe it's less about the "action" being emitted and more just a description of
    // what the transition represents. ¬Ø\_(„ÉÑ)_/¬Ø
    ResetPosition,
}

/// Some transitions can generate multiple actions. For example, after having
/// received a `'.'` chracter and the current character is a newline, then
/// the transition will generate two successive `AddToken` actions, since it
/// wasn't known in the previous state whether the period would be a symbol
/// token or leading into a float token. There should not, however, be a situation
/// where more than three actions are required in a single transition.
#[derive(Debug)]
pub struct Transition {
    pub state: Box<dyn State>,
    pub actions: Vec<Action>, // TODO: Avoiding a vec would be nice
}

pub enum TransitionErrorPosition {
    CurrentPosition,
    TokenStartPosition,
}

pub struct TransitionError {
    pub kind: LexErrorKind,
    pub position: TransitionErrorPosition,
}


#[derive(Debug, Default, PartialEq)]
pub(super) struct Stack(String);

impl Stack {
    pub fn consume(self) -> String {
        self.0
    }

    pub fn push(&mut self, c: char) {
        self.0.push(c);
    }

    pub fn top(&self) -> Option<char> {
        self.0.chars().rev().next()
    }
}

impl From<char> for Stack {
    fn from(c: char) -> Self {
        Self(String::from(c))
    }
}


/// A state in the lexer's state machine.
pub trait State : any::Any + fmt::Debug {
    /// Receives a character (or `None` when EOF) and returns the next state.
    fn receive(self: Box<Self>, c: Option<char>) -> ReceiveResult;

    /// Returns whether or not the given character can successfully terminate the current state,
    /// defaulting to only allowing whitespace, newlines, or EOF to terminate.
    fn can_terminate(&self, c: Option<char>) -> bool {
        c.is_none() || matches!(c, Some(c) if is_whitespace(c) || is_newline(c))
    }
}

/// Utility for boxing the state and returning a single-action transition
pub(super) fn to<S: State + 'static>(state: S, action: Action) -> ReceiveResult {
    let state = Box::new(state);
    Ok(Transition { state, actions: vec![action] })
}

/// Utility for passing the character to a different state to determine the appropriate
/// next state and chaining the supplied action to one generated by the state being
/// deferred to.
pub(super) fn defer_to<S: State + 'static>(deferred_to: S, c: Option<char>, previous_action: Action) -> ReceiveResult {
    let mut transition = Box::new(deferred_to).receive(c)?;
    transition.actions.insert(0, previous_action);
    Ok(transition)
}

pub(super) fn is_identifier_char(c: char) -> bool {
    c == '_'
        || c.is_alphabetic()
        || (
            // `char.is_alphabetic` isn't enough because that precludes other unicode chars
            // that are valid in postgres identifiers, eg:
            //     create table love (üíù text);
            //     > CREATE TABLE
            //
            // There is, however, a very strong chance the below conditions are not fully accurate.
            !c.is_control() && !c.is_whitespace() && !c.is_ascii_punctuation()
        )
}

pub(super) fn is_whitespace(c: char) -> bool {
    c == ' ' || c == '\t'
}

pub(super) fn is_newline(c: char) -> bool {
    ['\r', '\n'].contains(&c)
}

#[cfg(test)]
mod tests {
    #[test]
    fn test_is_whitespace() {
        assert!(super::is_whitespace(' '));
        assert!(super::is_whitespace('\t'));
        assert!(!super::is_whitespace('\r'));
        assert!(!super::is_whitespace('\n'));
    }

    #[test]
    fn test_is_newline() {
        assert!(super::is_newline('\r'));
        assert!(super::is_newline('\n'));
        assert!(!super::is_newline(' '));
        assert!(!super::is_newline('\t'));
    }

    #[test]
    fn test_is_identifier_char() {
        assert!(super::is_identifier_char('a'));
        assert!(super::is_identifier_char('Z'));
        assert!(super::is_identifier_char('7'));
        assert!(super::is_identifier_char('_'));
        assert!(super::is_identifier_char('üíù'));

        assert!(!super::is_identifier_char(' '));
        assert!(!super::is_identifier_char('\t'));
        assert!(!super::is_identifier_char('\r'));
        assert!(!super::is_identifier_char('\n'));
        assert!(!super::is_identifier_char('.'));
        assert!(!super::is_identifier_char('-'));
    }
}
